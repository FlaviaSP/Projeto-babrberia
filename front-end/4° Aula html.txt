###Refazendo a pagina incial

Começaremos a trabalhar para que a página inicial possua um aspecto melhor, mais condizente com a página de produtos. Ao acessarmos produtos.html, copiaremos o reset.csse style.css para index.html.

<link rel="stylesheet" href="reset.css">
<link rel="stylesheet" href="style.css">
Com a inserção desse código, as margens da página ficam maiores e os elementos ficam desorganizados, mas trata-se apenas de uma fase do processo e não o resultado final.

O cabeçalho da página inicial é diferente do que temos na página de produtos, portanto copiaremos o cabeçalho de proutos.html e inseriremos em index.html.

<header>
            <div class="caixa">
                <h1><img src="logo.png"></h1>

                <nav>
                    <ul>
                        <li><a href="index.html">Home</a></li>
                        <li><a href="produtos.html">Produtos</a></li>
                        <li><a href="contato.html">Contato</a></li>
                    </ul>
                </nav>
            </div>
        </header>
A página inicial também não possui rodapé, então novamente coletaremos o código de rodapé da página de produto, que deverá ser inserido entes da última <div> em index.html.

<footer>
            <img src="logo-branco.png">
            <p class="copyright">&copy; Copyright Barbearia Alura - 2019</p>
</footer>
Feito isso, precisamos melhorar a marcação que fizemos na página inicial, que estava muito simples. Sabemos que todo conteúdo precisa ser muito bem dividido e marcado, e para delimitar o conteúdo principal precisamos da tag <main>, semelhante a que temos na página de produto. Dito isso, envolveremos todas as informações principais nesta tag.

<img id="banner" src="banner.jpg">

<main>
            <div class="principal">
                <h2 class="titulo-centralizado">Sobre a Barbearia Alura</h2>

                <p>Localizada no coração da cidade a <strong>Barbearia Alura</strong> traz para o mercado o que há de melhor para o seu cabelo e barba. Fundada em 2019, a Barbearia Alura já é destaque na cidade e conquista novos clientes a cada dia.</p>

                <p id="missao"><em>Nossa missão é: <strong>"Proporcionar auto-estima e qualidade de vida aos clientes"</strong>.</em></p>

                <p>Oferecemos profissionais experientes e antenados às mudanças no mundo da moda. O atendimento possui padrão de excelência e agilidade, garantindo qualidade e satisfação dos nossos clientes.</p>
            </div>

            <div class="beneficios">
                <h3 class="titulo-centralizado">Benefícios</h3>

                <ul>
                    <li class="itens">Atendimento aos Clientes</li>
                    <li class="itens">Espaço diferenciado</li>
                    <li class="itens">Localização</li>
                    <li class="itens">Profissionais Qualificados</li>
                </ul>

                <img src="beneficios.jpg" class="imagembeneficios">
            </div>
</main>
A imagem não foi inclusa dentro da tag, pois ela não faz parte do conteúdo principal, trata-se apenas de uma imagem de exibição e que deve estar em destaque e ocupar toda a extensão da tela no sentindo horizontal.

Em nosso site, temos uma descrição com o título "Sobre a Barbearia Alura". Trata-de se informações que são fechadas em si mesmas, como uma sessão. Em nosso código esse conteúdo está sendo envolvido por uma <div>, mas para casos assim utilizamos a tag <section>.

<section class="principal">
                <h2 class="titulo-centralizado">Sobre a Barbearia Alura</h2>

                <p>Localizada no coração da cidade a <strong>Barbearia Alura</strong> traz para o mercado o que há de melhor para o seu cabelo e barba. Fundada em 2019, a Barbearia Alura já é destaque na cidade e conquista novos clientes a cada dia.</p>

                <p id="missao"><em>Nossa missão é: <strong>"Proporcionar auto-estima e qualidade de vida aos clientes"</strong>.</em></p>

                <p>Oferecemos profissionais experientes e antenados às mudanças no mundo da moda. O atendimento possui padrão de excelência e agilidade, garantindo qualidade e satisfação dos nossos clientes.</p>
</section>
A diferença entre <div> e <section> é que no primeiro caso, trata-se apenas de uma divisão visual. Já no caso da <sectiom> teremos uma divisão por conteúdo complexo, semanticamente homogêneo.

Na parte de benefícios, também possuímos conteúdos fechados em si, neste caso também substituiremos a <div> por <section>.

<section class="beneficios">
                <h3 class="titulo-centralizado">Benefícios</h3>

                <ul>
                    <li class="itens">Atendimento aos Clientes</li>
                    <li class="itens">Espaço diferenciado</li>
                    <li class="itens">Localização</li>
                    <li class="itens">Profissionais Qualificados</li>
                </ul>

                <img src="beneficios.jpg" class="imagembeneficios">
            </section>
Ao retornarmos para o navegador, perceberemos as sessões centralizadas, mas ainda resta fazermos ajustes nas imagens, lista de benefícios assim por diante. Faremos esse processo passo a passo, elemento por elemento, de forma que possamos revisar conteúdos que já conhecemos, assim como evoluirmos o projeto.

Teremos que em alguns pontos reescrever o que já foi feito, pois isso é rotineiro para quem trabalha com desenvolvimento, afinal sempre há implementações novas e atualizações. Sempre será necessário melhorar nossos conteúdos, refatorar códigos, realizar manutenções e reparos.

!!!!Qual a diferença entre usar uma <div> ou uma <section>?
Para um bloco onde o conteúdo tenha o mesmo significado, o mesmo sentido, usamos uma <section>.!!!
Em nossa página inicial temos o banner que criamos o id para ele. Contudo, aprendemos que o identificador não é necessário neste caso.

<img id="banner" src="banner.jpg"> 
Substituiremos o identificador por uma classe. No universo HTML e CSS, ao falarmos de estilo, usamos uma classe, quando falamos de comportamento, usamos o identificador. A força da classe não é tão grande, então ela pode ser sobrescrita e seu estilo alterado, por isso é importante em CSS sempre utilizarmos classes, assim criamos um padrão em nosso código, o que é fundamental.

<img class="banner" src="banner.jpg">
Em style.css criaremos o banner. É importante que documentemos nosso código para que ele se torne compreensível. Em CSS, utilizase /* para demarcar a linha de comentário, ela não será interpretada pelo navegador.

/*css da página inicial*/
.banner {
    width:100%;
}
Ao acessarmos o navegador, verificaremos que a imagem já o ocupa o espaço total da tela, como havíamos planejado. Agora, trabalharemos na parte de "sobre" da barbearia Alura. Em nosso HTML index.html teremos esse conteúdo marcado pela classe principal, já o título será marcado pela classe titulo-centralizado.

<section class="principal">
                <h2 class="titulo-centralizado">Sobre a Barbearia Alura</h2>

                <p>Localizada no coração da cidade a <strong>Barbearia Alura</strong> traz para o mercado o que há de melhor para o seu cabelo e barba. Fundada em 2019, a Barbearia Alura já é destaque na cidade e conquista novos clientes a cada dia.</p>

                <p id="missao"><em>Nossa missão é: <strong>"Proporcionar auto-estima e qualidade de vida aos clientes"</strong>.</em></p>

                <p>Oferecemos profissionais experientes e antenados às mudanças no mundo da moda. O atendimento possui padrão de excelência e agilidade, garantindo qualidade e satisfação dos nossos clientes.</p>
</section>
É importante dizer que que a classe titulo-centralizado não possui um bom nome, afinal sempre que criamos uma classe do CSS é importante que ela seja específica e ao mesmo tempo o mais genérica possível. Quando temos um nome como "titulo centralizado", estamos imprimindo um comportamento, então se quiséssemos alinhar o título à esquerda, teríamos de modifcar o nome da classe, ou criar uma nova.

Portanto, alteraremos o nome da classe para titulo-principal, e em style.css faremos as especificações de estilo. As medidas proporcionais no CSS são um assunto crucial no mento de definir escalas, tamanho de fonte e assim por diante. Até agora em nosso projeto utilizamos pixel e percentual, no caso do percentual ela se trata de uma media proporcional, como notamos ao definir que a imagem do banner deveria o ocupar 100% de largura em relação a página, se quiséssemos que o banner ocupasse metade da largura da página, bastaria escrever 50%.

Se quisermos que a fonte de titulo-principal seja o dobro da fonte padrão, independe do tamanho dessa fonte padrão, utilizamos a medida em, a media proporcional para pixels. Se quisermos duas vezes o tamanho base (15 pixels), basta escrever 2em.

Incluiremos uma margem de 0 0 1em. É sempre interessante inserir um espaçamento que seja proporcional ao tamanho da fonte, o que facilita a leitura do usuário.

.titulo-principal {
    text-align: center;
    font-size: 2em;
    margin: 0 0 1em;
}
Temos a classe principal p que envolve os parágrafos. então em style.css configuraremos uma margem de 0 0 1em, proporcional ao tamanho da fonte.

.principal p {
    margin: 0 0 1em;
}
Toda a vez que tenhámos a tag strong o peso do texto esteja em negrito e a tag em indicará que o estilo da fonte seja em itálico.

.principal strong {
    font-weight: bold;
}

.principal em {
    font-style: italic;
}
Na sessão de "Benefícios", também substituiremos titulo-centralizado por titulo-principal, e então o estilo que definimos em style.css será aplicado.

<section class="beneficios">
                <h3 class="titulo-principal">Benefícios</h3>

                <ul>
                    <li class="itens">Atendimento aos Clientes</li>
                    <li class="itens">Espaço diferenciado</li>
                    <li class="itens">Localização</li>
                    <li class="itens">Profissionais Qualificados</li>
                </ul>

                <img src="beneficios.jpg" class="imagembeneficios">
</section>
Para finalizar aula, regularemos o tamanho de imagembeneficios

.imagembeneficios {
    width: 60%
}
Desse modo a imagem não fica tão distorcida. Nas próximas aulas inseriremos a imagem da sessão "Sobre a Barbearia Alura", em que o texto engloba essa imagem. Trata-se de uma técnica de CSS que ainda não aprendemos.

Para terminar o bloco de conteúdo "Sobre a Barbearia Alura" no estilo que queremos, precisaremos incluir a imagem de utensílios de barbearia no canto esquerdo da tela. Primeiramente inseriremos a imagem untensilios.jpg em index.html, e corresponde a classe utensilios. Um ponto importante é o alt da imagem, isto é, o texto alternativo que descreve de maneira sucinta o conteúdo visual expresso na imagem. Esse recurso é utilizado caso a imagem não seja carregada ou para pessoas que utilizam leitores de tela.

<section class="principal">
                <h2 class="titulo-principal">Sobre a Barbearia Alura</h2>

                <img class="utensilios" src="utensilios.jpg" alt="Utensílios de um barbeiro." />

                <p>Localizada no coração da cidade a <strong>Barbearia Alura</strong> traz para o mercado o que há de melhor para o seu cabelo e barba. Fundada em 2019, a Barbearia Alura já é destaque na cidade e conquista novos clientes a cada dia.</p>

                <p id="missao"><em>Nossa missão é: <strong>"Proporcionar auto-estima e qualidade de vida aos clientes"</strong>.</em></p>

                <p>Oferecemos profissionais experientes e antenados às mudanças no mundo da moda. O atendimento possui padrão de excelência e agilidade, garantindo qualidade e satisfação dos nossos clientes.</p>
</section>
Ao carregarmos o navegador, a imagem já estará disponível no site, mas ainda precisamos regular seu tamanho em style.css:

.utensilios {
    width: 120px;
}
O próximo passo é fazer com que o texto englobe essa imagem. Conhecemos algumas formas de tratar esses elementos, a primeira é utilizar o display do elemento para inline-block, e então todos os parágrafos seguirão o mesmo modo. Neste caso específico esta abordagem não funcionará, pois o display altera o comportamento do elemento padrão, e neste caso queremos que a imagem ocupando uma área específica e que o texto ocupe a largura inteira da página, mas que ceda espaço para a imagem.

Estudamos também o posicionamento(position) relativo, que coleta o ponto inicial e a partir disso faz deslocamentos. Aprendemos ainda sobre o posicionamento absoluto, em que podemos deslocar o ponto inicial para qualquer lugar. Neste caso, a imagem ficará por cima do texto, descolada da apresentação. Em suma, trabalhar com position não resolverá nossos problemas.

Temos, ainda, mais uma forma de posicionar e tratar elementos: o float, em tradução livre "flutuação". Quando utilizamos este recurso,o elemento "descola" da página mas o que seria a sua sombra, continua sendo ocupada virtualmente, isto é, o texto respeita esse espaço ocupado.

Para fazermos nossa imagem "flutuar" acessaremos style.css e definiremos em utensilios qual é o lado que desejamos que a flutuação ocorra, neste caso, left.

.utensilios {
    width: 150px;
    float: left;
}
Feita essa alteração, os parágrafos começam a se alinhar de acordo com a imagem. Contudo, o elemento está posiconado na extrema esquerda da tela, e o texto se inicia na mesma linha e o título "Benefícios" também foi desalinhado. O float é um recurso que altera completamente a estrutura da página, todos os elementos abaixo do float passam a ser afetados por ele. Podemos criar uma "barreira" que delimitará seu alcance na página.

De volta a style.css em titulo-principal, adicionaremos a propriedade clear que "limpa" o float que está posicionado à esquerda.

.titulo-principal {
    text-align: center;
    font-size: em;
    margin: 0 0 1em;
    clear: left;
}
Conseguimos delimitar a ação do float, mas o texto continua muito junto à imagem. Em untensilios, adicionaremos uma margem de 20px para a direita, 20px para baixo e 0 para a esquerda.

.principal em {
    font-style: italic;
    float: left;
    margin: 0 20px 20px 0;
}
Feito isso, a imagem está corretamente posicionada, e a margem entre ela e o texto também foi implementada.


!!!Tanto o float:left quanto o float: right servem para que o elemento se destaque na tela, deixe de ocupar o espaço em que estava, para que os outros elementos possam se posicionar ao redor dele!!!

####Fontes externas
Nesta aula passaremos por três vídeos para compreender como utilizar fontes externas para os textos, para o mapa e para vídeos. Primeiramente precisamos entender quais são as características de fontes preparadas para web: elas funcionam melhor em todos os navegadores, possuem comportamento parecido em todos os sistemas operacionais. Já uma fonte que não foi prepara para web não possui essas características, afinal seu foco é para materiais gráficos impressos.

Existem fontes públicas, fontes em que o código é aberto e podemos realizar modificações e as fontes proprietárias que são de algumas empresas ou marcas. Em nosso projeto, utilizaremos uma fonte aberta e pública.

Há diversos agregadores de fontes disponíveis na internet, e um deles é o Google Fonts. Encontraremos uma diversidade imensa de fontes e todas preparadas para web. Podemos fazer o download das fontes para o computador e aplicá-las em algum projeto gráfico no Photoshop, por exemplo, ou podemos utiliza-las na web diretamente.

No site da barbearia Alura, utilizaremos a fonte Montserrat, que pode facilmente ser achada no buscador do Google Fonts. Basta selecionarmos o ícone de "+" , e será aberta uma caixa de diálogo em que encontraremos instruções para a aplicação da fonte e seu código.

A forma mais simples de utilizar essa fonte é importar o CSS, e já aprednemos a realizar esse processo. Copiaremos o código disponibilizado no Google Fonts:

<link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">
E então o copiaremos em para index.html:

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Barbearia Alura</title>
    <link rel="stylesheet" href="style-home.css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">
</head>
A fonte foi importada e não implementada no site. Precisamos ainda especificar no CSS que estamos utilizando aquela família de fonte. Queremos que todo o conteúdo textual do site utilize a fonte Montserrat, portanto na primeira linha em style.css criaremos uma declaração no body.

body {
    font-family: 'Montserrat', sans-serif;
}
Feito isso, ao recarregarmos o navegador, podemos ver a fonte aplicada em todos os conteúdos textuais do site. Essa é a forma mais simples de utilizarmos uma fonte externa.

###MAaapas
Já importamos a fonte para nosso site e conseguimos melhorar a apresentação. Nesta aula, trataremos da área do mapa, aquela que indica a localização da barbearia. Teremos mais um título e subtítulo e o conteúdo do Google Maps.

mapa

Em index.html, entre a parte de conteúdo principal e de benefícios, criaremos uma nova <section> e a classe mapa. Povoaremos essa nova sessão com o conteúdo textual com a classe titulo-principal e um parágrafo de texto.

            <section class="mapa">
                <h3 class="titulo-principal">"Nosso estabelecimento</h3>
                <p>Noss estabelecimento está localizado no coração da cidade.</p>
            </section>
O espaçamento ainda não está adequado, mas por enquanto focaremos somente no HTML e posteriormente faremos os ajustes necessários na diagramação da página. Para incluir o mapa, faremos a importação do serviço de mapa do Google Maps. Pesquisaremos pelo endereço de "Alura sp". No menu sanfonado na parte esquerda da tala, escolheresmos a opção "Compartilhar ou incorporar mapa".

##menu

Ao clicarmos na opção assinalada, teremos acesso a um link com a localização específica da Alura. Copiaremos esse link para usa-lo no código HTML que compõe nossa página, na nova sessão que acabamos de criar.

<section class="mapa">
    <h3 class="titulo-principal">"Nosso estabelecimento</h3>
    <p>Nosso estabelecimento está localizado no coração da cidade.</p>

    <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3656.448598130907!2d-46.634653385542414!3d-23.588239368469353!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x94ce5a2b2ed7f3a1%3A0xab35da2f5ca62674!2sCaelum%20-%20Escola%20de%20Tecnologia!5e0!3m2!1spt-BR!2sbr!4v1580916426151!5m2!1spt-BR!2sbr" width="600" height="450" frameborder="0" style="border:0;" allowfullscreen=""></iframe>

</section>
Ao recarregarmos o navegador, o mapa já estará visível na página. A tag <iframe> é específica para abrir "janelas" em nosso site, com proporções definidas e endereço da informação. Podemos fazer o msemo com outros serviços que apresentem essa possibilidade de compartilhamento de informações, como vídeos, fotos de Instagram, páginas de Facebook e outros. Os acessos externos que complementam a página são, geralmente, feitos pela tag <iframe>.

Precisaremos modificar o espaçamento entre os conteúdos. Primeiramente adaptaremos as dimensões do mapa no HTLM: with terá o valor de100% e height de 300. Feito isso, criaremos em style.css a sessão mapa que terá espaçamentos internos definidos. Queremos ainda que o parágrafo que está na sessão mapa tenha um espaçamento externo(margin) específico, e o centralizamos.

.mapa {
    padding: 3em 0;
}

.mapa p {
    margin: 0 0 2em;
    text-align: center;
}

Importando o VIDEO
Para finalizar o conteúdo e a importação dos elementos, lidaremos com o vídeo do site. Novamente abriremos uma "janela" de conteúdo em nosso site por meio da tag <iframe>. O vídeo que utilizaremos é proveniente da plataforma YouTube, mas poderia ser de qualquer outra.

Entraremos diretamente no YouTube, e logo abaixo do vídeo que queremos inserir no site, teremos a opção "Compartilhar".

youtube

Na caixa de diálogo que surgirá após clicarmos na opção assinalada, clicaremos sobre a alternativa "incorporar". Feito isso, teremos o código HTML correspondente envolto pela tag <iframe>.

Inseriremos o código em index.html, logo abaixp da imagem de "benefícios".

<section class="beneficios">
                <h3 class="titulo-principal">Benefícios</h3>

                <ul>
                    <li class="itens">Atendimento aos Clientes</li>
                    <li class="itens">Espaço diferenciado</li>
                    <li class="itens">Localização</li>
                    <li class="itens">Profissionais Qualificados</li>
                </ul>

                <img src="beneficios.jpg" class="imagembeneficios">

                <iframe width="560" height="315" src="https://www.youtube.com/embed/wcVVXUV0YUY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</section>
Ao recarregarmos o navegador, o vídeo já estará disponível na página, mas ainda precisamos centralizá-lo. A melhor maneira de centralizarmos o vídeo é criar uma <div> que envolverá todo o <iframe>, isto é, será a mãe desse conteúdo e terá a classe video. Feito isso, em style.css ajustaremos a largura e a margem, de forma que o vídeo esteja centralizado na tela.


.video {
    width: 560px;
    margin: 1em auto;
}
Ainda precisamos melhorar os espaçamentos e alguns outros detalhes, mas a importação do vídeo em si é bastante simples.


Pseudo-classes
No CSS temos algo chamado pseudo-elementos. Conhecemos alguns deles, como :hover, :active, :visited, :required. Tais recursos são utilizados para marcar melhor nossos elementos e gerar um comportamento mais interessante em nosso site.

Nesta aula,começaremos a tratar todo o CSS da sessão "Benefícios" com auxílio dos pseudo-elementos. Primeiramente alinharemos os elementos textuais e visuais, reorganizando as dimensões e espaçamentos.

desalinhado
Criaremos uma nova divisão por meio da <div> e a classe conteudo-beneficios, que abrangerá toda a lista e a imagem. A lista também terá uma nova classe chamada lista-beneficios. O mesmo se dará com a imagem, que terá a classe imagem-beneficios.


                <div class="conteudo-beneficios">
                    <ul class="lista-beneficios">
                        <li class="itens">Atendimento aos Clientes</li>
                        <li class="itens">Espaço diferenciado</li>
                        <li class="itens">Localização</li>
                        <li class="itens">Profissionais Qualificados</li>
                    </ul>

                    <img src="beneficios.jpg" class="imagembeneficios">
                </div>
Em style.css, incluiremos conteudo-beneficios e configuraremos suas propriedades. O mesmo ser dará para lista-beneficios. Para ajustar a lista de for

.conteudo-beneficios {
    width: 640px;
    margin: 0 auto;
}

.lista-beneficios {
    width: 40%;
    display: inline-block
}
Apesar das configurações, o texto e a imagem não estão um do lado do outro, como prevíamos.

ainda nao

O display quando configurado com inline-block, possui um detalhe que modifica o modo de exibição: ele interpreta no HTML todas as linhas do bloco de código, incluisive os espaços vazios entre a lista e a imagem. Portanto, quando utilizamos esse recurso, os elementos no HTML precisam estar colados, para que esse espaço não reflita na exibição da pagina.

                <div class="conteudo-beneficios">
                    <ul class="lista-beneficios">
                        <li class="itens">Atendimento aos Clientes</li>
                        <li class="itens">Espaço diferenciado</li>
                        <li class="itens">Localização</li>
                        <li class="itens">Profissionais Qualificados</li>
                    </ul><img src="beneficios.jpg" class="imagembeneficios">
                </div>
Feito isso, configuraremos para que a nossa lista não fique alinhada pela parte inferior, mas sim pela parte superior, então no CSS de lista-beneficios escreveremos a propriedade vertical-align com o valor top.

.lista-beneficios {
    width: 40%;
    display: inline-block;
    vertical-align: top;
}
Criaremos uma margem maior entre a imagem e o vídeo ao inserir o valor de 2em auto em video

.video {
    width: 560px;
    margin: 2em auto;

}
Na sessão de "Benefícios", inseriremos um padding de 3em 0.

.beneficios {
    padding: 3em 0;
}
De acordo com o projeto final, ainda tempos ajustes a serem feitos. Precisamos incluir mais dois itens na lista de benefícios "pontualidade" e "limpeza", resta ainda negritar a primeira frase e inserir as estrelas que marcam os tópicos.

Primeiramente, inseriremos os itens ausentes no código HTML.

                <div class="conteudo-beneficios">
                    <ul class="lista-beneficios">
                        <li class="itens">Atendimento aos Clientes</li>
                        <li class="itens">Espaço diferenciado</li>
                        <li class="itens">Localização</li>
                        <li class="itens">Profissionais Qualificados</li>
                        <li class="itens">Pontualidade</li>
                        <li class="itens">Limpeza</li>
                    </ul><img src="beneficios.jpg" class="imagembeneficios">
                </div>
Incluiremos a classe itens em style.css. Feito isso, adicionaremos a propriedade line-height para definir o espaçamento entre as linhas, proporcional ao tamanho das fontes. Neste caso colocaermos o tamanho da fonte, mais 50%.

.itens {
    line-height: 1.5;
}
A próxima etapa é negritar o primeiro item da lista. Antigamente, a única possibilidade de realizar esse tipo de operação era criar classes específicas para uma alteração que deveria ser no CSS. Hoje em dia com as atualizações e melhorias do CSS, temos os já mencionados pseudo-elementos.

itens: first-child {
    font-weight: bold;
}
Para seleção de elementos específicos temos três opções: a primeira delas é utilizar uma classe pseudo-elemento first-child. Temos seis itens que são irmãos nos itens da lista, e as alteração serão feitas no primeiro item. Escreveremos que o peso da fonte será em negrito.

itens: first-child {
    font-weight: bold;
}
Dessa maneira, o primeiro item estará em negrito ao carregarmos o navegador. Dessa maneira criamos, via CSS, uma marcação. Além do first-child, temos a opção last-child que marcará o último item da lista. Isso é interessante, porque não precisaremos mais saber quantos itens existem na lista para passar configurações precisas, essa caracaterística é muito útil em manipulação de tabelas, por exemplo.

Por fim, temos a possibilidade de selecionar qualquer elemento da lista por via do nth-child(), que receberá o número que quisermos, como por exemplo 4, que se refere ao quarto elemento da lista. Podemos ainda utilizar valores como 2n com o nth-child(), o que quer dizer marcamos todos os elementos pares da lista, isto é, o segundo, quarto e sexto elemento da lista ficam em negrito.


Aplicando Gradientes
Nesta aula, trataremos a exibição do fundo, o background da página. No projeto final, nosso site tem uma trasição do branco para o cinza,um degradê. Antes do CSS 3, para o efeito de degradê ser incluído em um site, precisaríamos tratar o background como imagem.

Primeiramente, trabalharemos a sessão "Sobre a barbearia Alura", que chamamos de principal. Precisamos adequá-la ao estilo das demais sessões, para tanto, criaremos .principal em style.css. Adicionaremos o padding de 3em 0 e o background com um tom quase branco, cujo código é #FEFEFE.

.principal {
    padding: 3em 0;
    backgroud: #FEFEFE;
} 
Em beneficios, inseriremos a cor cinza escuro:

.beneficios { 
    padding: 3em 0;
    background: #888888;
Notaremos que a cor cinza não ocupa toda a extensão da página, mas sim uma grande faixa central. Isso ocorre porque configuramos a centralização da página em <main>, o que não vai funcionar. Recortaremos o conteúdo de .main em style.css:

main {
    width: 940px;
    margin: 0 auto;
}
E então inseriremos esse conteúdo no elementos principal . Dessa maneira, o fundo cinza já ocupara toda a área da tela.

.principal {
    padding: 3em 0;
    background: #FEFEFE;
    width: 940px;
    margin: 0 auto;
}
Se inserirmos qualquer cor de fundo de mapa por meio da propriedade background, teremos complicações no layout, afinal a cor só ocupará uma faixa central. Se adicionarmos o width e margin com os valores de principal deformaremos o mapa, que passará a ocupar a página inteira, e não queremos isso.

Para evitar esse problema, em nosso código HTML criaremos uma nova <div> que envolverá o mapa, além disso, criaremos uma classe específica que se chamará mapa-conteudo.

Em style.css, mapa-conteudo abrigará as propriedades width e margin com os valores específicos.

.mapa-conteudo {
    width: 940px;
    margin: 0 auto;

}
Dessa maneira, mapa ficará centralizado, com as proporções que desejamos. Com essas modificações, estamos prontos para trabalhar com a propriedade background em mapa. Precisamos aqui ajustar a transição da cor branca para o cinza, então utilizaremos o linear-gradient() que receberá as cores que desejamos trabalhar. O interessante dessa propriedade é que podemos adiciconar quantas cores quisermos, que o CSS irá administrá-las automaticamente. É possível, inclusive, ajustar a inclinação das cores, por exemplo 45deg e então ficarão posicionadas em 45º.

.mapa {
    padding:3em 0;
    background: linear-gradient(45deg, orange, blue, red, black);
}
Como estamos utilizando quatro cores no exemplo, há valores subentendidos em cada uma delas, na sequência: 0%, 25%, 50%, e 75% para a última cor da sequência. Mas podemos manipular esses valores de acordo com nosso interesse , como definir que orange, por exemplo, terá o valor de 50%.

.mapa {
    padding:3em 0;
    background: linear-gradient(45deg, orange 50%, blue, red, black);
}
Além do degradê linear(linear-gradient) temos ainda a opção radial(radial-gradient), que organiza a transição de cores de maneira circular. Nosso site terá uma gradação de cinza linear

.mapa {
    padding:3em 0;
    background: linear-gradient(#FEFEFE, #888888);
}
Temos em nosso site um belo efeito visual em escala de cinza!

Pseudo-elementos
Evoluiremos ainda mais em nosso entendimento do CSS, e um dos tópicos do nosso estudo serão os já referidos pseudo-elementos, que não existem no código HTML e são criados via CSS.

Utilizaremos o título "Nosso estabelecimento" para entendermos as possibilidades do CSS. Se quisermos negritar apenas a primeira letra desse título? Com os conhecimentos que temos até agora, isso seria possível?

Não, pois estudamos seletores avançados de classe, identificadores, mas nada que possibilitasse a marcação de uma única letra. Contudo, essa é uma ação possível graças às atualizações e melhorias no CSS. Na tag titulo-principal, utilizaremos o pseudo-elemento first-letter para definir o peso da fonte.

.titulo-principal {
    text-align: center;
    font-size: em;
    margin: 0 0 1em;
    clear: left;
}

.titulo-principal:first-letter {
    font-weight: bold;
}
Ao carregarmos a página, teremos a primeira letra do título "Nosso estabelecimento" em negrito, isto é, a letra "N". Outra opção interessante, muito comum no mercado editorial, é configurar a primeira linha para itálico. Para tanto, ajustamos para que todos os parágrafos (p) terão a primeira linha (first-line) no estilo italic.

p:first-line {
    font-style: italic;
}
Conheceremos ainda outros dois pseudo-elementos do CSS: after e before. Esses dois elementos criam espaço para que o CSS atue antes ou depois de um determinado conteúdo. Continuaremos utilizando o título para entender como a sintaxe se dá:

.titulo-principal:before {
    content: "[";
}

.titulo-principal:after {
    content:"]"
}
Dessa maneira, ao recarregarmos a página o título estará envolvido por colchetes: "[Nosso estabelecimento]". É interessante mencionar que esse conteúdo - os colchetes - não são selecionáveis pelo mouse, trata-se apenas de uma informação visual e não um conteúdo manipulável. Utilizaremos os caracteres unicode para inserir estrelas na lista da sessão "Benefícios", que trabalhávamos na aula anterior.

Procuraremos no Google por "unicode star" e copiaremos o conteúdo da estrela que acharmos visualmente mais interessante. Em nosso CSS, trabalharemos na classe itens, utilizaremos o pseudo-elemento before para que antes do conteúdo da lista, haja uma estrela.

itens:before {
    content: ""
}
Ao carregarmos a página, teremos as estrelas marcadas em cada item da lista. Novamente trata-se de um elemento não selecionável, apenas conteúdo de exibição.


#Seletores avançados
Nesta aula, estudaremos os seletores avançados, uma forma específica de fazermos seleção de elementos de maneira mais rebuscada. Suponhamos que no interior da <main>, antes de se iniciar a <section>, nós tenhamos um <p> com um conteúdo qualquer. Se retornarmos para o nosso CSS,

<main>
            <p> qualquer conteudo</p>

            <section class="principal">
                <h2 class="titulo-principal">Sobre a Barbearia Alura</h2>

                <img class="utensilios" src="utensilios.jpg" alt="Utensilios de um barbeiro." />

                <p>Localizada no coração da cidade a <strong>Barbearia Alura</strong> traz para o mercado o que há de melhor para o seu cabelo e barba. Fundada em 2019, a Barbearia Alura já é destaque na cidade e conquista novos clientes a cada dia.</p>

                <p id="missao"><em>Nossa missão é: <strong>"Proporcionar auto-estima e qualidade de vida aos clientes"</strong>.</em></p>

                <p>Oferecemos profissionais experientes e antenados às mudanças no mundo da moda. O atendimento possui padrão de excelência e agilidade, garantindo qualidade e satisfação dos nossos clientes.</p>
</section>
No CSS, como fazemos para marcar esse parágrafo de vermelho? Podemos tentar escrever:

main p {
    background: red;
}
Ao carregarmos no navegador, veremos que todos os parágrafos estarão marcados de vermelho, pois coletamos os parágrafos que estavam dentro da <section>, afinal coletamos todos os parágrafos que estão dentro da <main>. Como podemos selecionar um parágrafo de maneira individual?

Com os seletores avançados do CSS,podemos selecionar os filhos diretos de <main>, para tanto, utilizaremos o sinal >, e todo os outros parágrafos serão ignorados, afinal são filhos diretos da <section> e não de <main>.

main > p {
    background: red; 
}
Mas como selecionar o primeiro parágrafo que sucede uma imagem, por exemplo? Conseguimos selecionar o primeiro filho com o seletor que acabamos de conhecer, mas neste caso estamos falando do primeiro irmão que vem depois de um elemento.

Neste caso, usamos img como elemento âncora e para o primeiro irmão usamos o sinal de "+"

img + p { 
    balckground: blue;
Para selecionar todos os parágrafos localizados depois de uma imagem usamos o seletor ~

img ~ p {
    background: yellow
} 
É importante lembrar que um seletor pode sobrescrever o outro, pois todos possuem a mesma força. Os seletores avançados nos ajudam a criar estilos mais complexos e utilizar o CSS de uma maneira incrível, com uma autonomia maior do HTML.

No CSS podemos, inclusive, excluir itens específicos. Se quisermos excluir todos os parágrafos que não compõe missao, escreveremos:

.principal p:not(#misssao) {
    background: orange;
}
A exclusão é um elemento poderoso no CSS, principalmente quando realizamos manutenção em algum código que já existe e que não demos modificar tanto o HTML.

#Cálculos com CSS
Nesta aula,aprenderemos como realizar cálculos dinâmicos de posicionamento de elementos no CSS, como altura e largura.

Nosso site deve estar preparado para dispositivos com diversos tamanhos de tela. Um grande problema enfrentado ao desenvolver um site harmonioso é justamente calcular a proporção s dimensões dos elementos em diferentes dispositivos.

Clicaremos sobre a imagem de utensílios de barbeiro com o botão direito do mouse, então selecionaremos a opção "Inspecionar" para acessarmos a ferramenta do desenvolvedor.

Em nosso CSS, verificaremos que o tamanho da imagem é de 120px, mas como podemos fazer com que esse tamanho seja proporcional? Basta mudar para percentual, isto é, 20% de largura tendo a tela como referência.

Para que a imagem sempre ocupe a medida correta em outros dispositivos, utilizamos a propriedade calc. O calculo que desejamos realizar é escrito entre parênteses, em que inserimos o primeiro valor, o tipo de operção e o resultado esperado.

.utensilios {
    width: calc(40% - 26px);
    float: left;
    Margin: 0 20px 20px 

}
Dessa forma, foi calculado precisamente 350px de largura para este elemento. É possível encadear quantas operações quisermos, no mesmo modelo de sintaxe.

.utensilios {
    width: calc(40% - (26px * 4);
    float: left;
    Margin: 0 20px 20px 

}
A propriedade calc nos dá o poder de fazer com o que cremos valores proporcionais específicos.

#Opacidade nos elementos
Nesta aula, aprenderemos a gerar opacidade em nossos elementos. A opacidade é uma camada a mais posta sobre a imagem, como um insulfilme para a janela de carro, que oferece níveis diferentes de proteção contra o Sol.

Utilizaremos a imagem da sessão "Benefícios" para compreendermos o funcionamento da ferramenta de opacidade no HTML. Em index.css , utilizaremos a propriedade opacity que pode ter valores entre 0 a 1, sendo que 0 o elemento estará totalmente oculto. Se quisermos exibir a imagem com opacidade de 30%, ajustaremos o valor da propriedade para 0.3.

.imagem-beneficios {
    width: 60%
    opacity: 0.3;
}
Esse recurso é interessante quando montamos composições visuais com elementos sobrepostos, ou para sugerir interações com o mouse ao utilizarmos o hover. Quando o mouse estiver posicionado sobre a imagem teremos 1 de opacidade.

.imagem-beneficios:hover {
    opacity: 1;
}
Temos ainda o recurso transition, em que podemos estabelecer uma transição da opacidade em determinados milissegundos.

.imagem-beneficios {
    width: 60%
    opacity: 0.3;
    transition: 400ms;
}
Em nosso site, faremos com o que o comportamento padrão da imagem seja de opacidade 1, e no momento em que mouse estiver sobre ela a opacidade será de 0.3, o que irá gerar um belo efeito visual.

Atualmente, podemos utilizar opacidade em todos os elementos e em cores, vamos entender melhor como isso ocorre.

A cor de titulo-principal possui a cor padrão #00000, preto. Como podemos fazer com que essa cor que está em hexadecimal? se torne RGB? Isto é, a mesma cor escrita em outra linguagem? Do seguinte modo:

.titulo-principal {
    text-align: center;
    font-size: 2em;
    margin: 0 0 1em;
    clear: left;
    color: rgb(0,0,0);
}
Com CSS 3, podemos utilizar mais uma camada - a de opacidade, chamada alfa - nas cores em RGB. Para tanto, utilizamos o rgbae então definir os valores que quisermos.

.titulo-principal {
    text-align: center;
    font-size: 2em;
    margin: 0 0 1em;
    clear: left;
    color: rgb(0,0,0,0.3);
}
Esse recurso pode ser utilizado em todas as cores: de fundo, texto, borda e assim por diante.

##Sombra nos elementos
Nesta aula, aprenderemos sobre as sombras, uma outra novidade que CCS 3 inseriu. Fazer sombras em elementos sempre foi muito difícil nas versões anteriores, hoje em dia, trata-se de algo trivial.

Continuaremos a usar a imagem da sessão de "Benefícios". A sombra é resultado de um efeito de "luz" que lançaremos sobre o elemento. O nome da propriedade que utilizaremos para gerar esse efeito é box-shadow, que possui a propriedade do eixo X, T e uma cor. Queremos deslocar 10px no eixo X e Y, a cor que utilizaremos será preto.

.imagem-beneficios {
    width: 60%
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px #000000;
}
Ao recarregarmos a página, teremos uma sombra projetada, quadrada.

sombra

Podemos melhorar a qualidade estética dessa sombra ao adicionarmos uma terceira propriedade chamada blur, em que podemos aplicar um nível de desfoque específico, no caso, inseriremos um valor de 5px. Quanto maior a quantidade de pixels que inserirmos, mais claro sera o efeito de desfoque.

.imagem-beneficios {
    width: 60%
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px 5px #000000;
}
Ao recarregarmos a página, veremos o efeito aplicado na sombra da imagem.

blur

Temos ainda uma quarta propriedade que configura a intensidade da borda a partir do tamanho do elemento, isto é, o tamanho da sombra projetada. Neste caso, inseriremos 20px:

.imagem-beneficios {
    width: 60%
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px 5px 20px #000000;

}
No navegador, a sombra sugirá expandida.

sombragrande

Podemos adicionar várias sombras em um mesmo elemento, basta que o conteúdo esteja separado por uma vírgula. Essa nova sombra terá valores negativos e terá a cor amarela.

.imagem-beneficios {
    width: 60%
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px 5px 20px #00000, -10px -10px yellow;

}
Será projetada uma sombra por debaixo da anterior.

Podemos, ainda, inserir uma terceira sombra com a cor rgba() com a camada de opacidade e borda vermelha.

.imagem-beneficios {
    width: 60%
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px 5px 20px #00000, -10px -10px yellow, -20px 20px rgba(255,0,0,0.5);

}
Ao recarregarmos a página teremos três sombras.

sombras

Outra possibilidade no CSS 3 é criar sombras internas. Utilizaremos a própria sessão de benefícios para exempliciar esse efeito, que será utilizado em box-shadowe se chama inset. Seu posicionamento será a partir do centro do elemento e terá a cor vermelha.

.beneficios {
    padding: 3em 0;
    background: #888888;
    box-shadow: inset 0 0 #FF0000;
}
Ao carregarmos a página, não notaremos qualquer mudança. Isso se deve pelo fato de que a sombra possui o mesmo tamanho do elemento. Para que ela se torne perceptível, criaremos um espaçamento de 30px.

.beneficios {
    padding: 3em 0;
    background: #888888;
    box-shadow: inset 0 0 30px #FF0000;
}
Feito isso, a sombra será interna em toda a sessão de benefícios.

sombra

Apagaremos todas as sombras coloridas e manteremos apenas a sombra leve em imagem-beneficios.

.imagem-beneficios {
    width: 60%
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px 10px 10px 0 #000000;
}
Para fechar o tópico de sombras, por último aprenderemos a inserir sombras em textos. Em titulo-principal, utilizaremos a propriedade text-shadow, que recebem os valores que já conhecemos.

.titulo-principal {
    text-align: center;
    font-size: em;
    margin: 0 0 1em;
    clear: left;
    text-shadow: 2px 2px #FF0000; 
}
Será criada uma sombra para o título.

#Meta tag de Viewport
Nesta aula, discutiremos sobre as versões mobile do nosso site, isto é, as adaptações necessárias para que o site seja visualizado corretamente em dispositivos móveis. Hoje em dia, a maior parte do fluxo de usuários na internet é proveniente de celulares, portanto um site não responsivo a tal necessidade é um problema.

Para testarmos a usabilidade do site, abriremos a ferramenta do desenvolvedor por meio do atalho "Ctrl + Shift + I" . No painel de ferramentas, teremos um ícone que representa tablets e celulares, a "Toggle device toolbar" , que também pode ser acessada pelo atalho "Ctrl + Shift + M".

ferramenta do de

No momento em que habilitamos essa opção, nosso site passa a se comportar como se estivesse sendo visualizado via celular: o conteúdo é compartimentando em 940px, o mínimo para esse tipo de plataforma. Atualmente, temos alguns problemas nesse tipo de visualização: a logo marcar está pequena,o menu está pouco legível assim como o conteúdo da lista de benefícios.

mobile

Primeriamente, precisamos compreender quantos pixels existem na tela para trabalhamos em uma melhor exibição. Atualmente, nossa tela se adapte ao tamanho disponibilizado pelo navegador, sendo o mínimo 940px. No caso de celulares o panorama é diferente: mesmo que a resolução do dispositivo seja de 2000px de largura, a quantidade de pixels existentes na tela sempre será diferente. Esses valores são chamados de DPI, isto é, a densidade de pixels por polegada.

Geralmente, os celulares possuem 320px de largura de tela,alguns maiores oscilam entre 350px e 480px. Portanto se o mínimo é 940px, teremos um valor discrepante. Uma informação crucial é saber quantos pixels possui a tela do usuário.

Trabalharemos com uma nova tag <meta>, mas dessa vez com propriedade e valor name="viewport" embutidas. Queremos, ainda, saber a largura do dispositivo, e para isso usaremos a propriedade content com o valor width=device-width.

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <title>Barbearia Alura</title>
    <link rel="stylesheet" href="style-home.css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">
</head>
Ao reabrirmos o navegador, veremos que o site se comporta de maneira diferente. A forma como os elementos etão distribuídos em relação ao fundo, o conteúdo é de 940px, mas a visualização mobile é de 375px, que corresponde a um IphoneX. Na pare superior da tela ainda podemos rotacionar a tela para horizontal e ver como a página se comporta.

fundo novo

Precisaremos, então, adaptar o CSS para que ele funcione nessa tela. Precisamos entregar para telas até 450px um estilo diferente, e faremos isso por meio de media queries. Perguntaremos ao navegador qual é o tamanho da tela em questão e, se for aquele que desejamos, entregaremos o estilo correto.

Para realizar isso, utilizaremos o @media, com o valor do tipo de tela screen e a pesquisa. Todas as telas que tenham até 450, terão esse estilo diferente, reescrito. Para exempliciar, colocaremos no background um estilo da cor vermelha.


@media screen and (max-width: 480px) {
    body {
        background: red;
    }
}
Ao regarregarmos a página veremos a modificação aplicada.

tela vermelha

Sabemos como o CSS pode responder a situações mobile, nas próximas aulas adaptaremos nosso conteúdo para entregar um site responsivo.

##Adaptar uma página para celular
De maneira bem objetiva e dinâmica, adaptaremos nosso site para que ele se torne responsivo, ou seja, que se comporte de maneira adequada no desktop e em dispositivos móveis.

Primeiramente nos atentaremos para o cabeçalho, que possui 940px de altura. Se inserirmos uma altura automática, o posicionamento dos elementos que compõe a sessão se deforma, portanto essa não é uma boa saída para solucionar a questão. Em style.css mudaremos a altura da caixa para auto. Quando elaboramos layouts responsivos, precisamos trabalhar exclusivamente no elemento que será modificado.

Faremos o mesmo procedimento para principal, conteudo-beneficios, mapa-conteudo e video.

@media screen and (max-width: 480px) { 
    .caixa, .principal, .conteudo-beneficios, .mapa-conteudo, .video {
        width: auto;
    }
}
Precisaremos ainda fazer uma pequena alteração na classe video, e anterar o width para 100%, assim evitamos uma deformação no layout.

Feito isso, faremos as alterações necessárias no cabeçalho da página, e a primeira adaptação que faremos é centralizar o <h1> Em nosso CSS, escreveremos:

h1 {
    text-align: center;
}
Feito isso, queremos que o menu - que até o presente momento está em posição absoluta - volte a ser estático. Então em nosso CSS escreveremos:

nav {
    position:static;
}
Por fim, faremos alterações na lista de benefícios, de forma que a imagem e texto fiquem melhor posicionados.

.lista-beneficios, imagem-beneficios {
    width: 100%
}
Há ainda melhorias possíveis, como alteração de espaçamentos, um respiro do texto em relação à borda da página, e assim por diante. Contudo, a página está funcional para mobile!